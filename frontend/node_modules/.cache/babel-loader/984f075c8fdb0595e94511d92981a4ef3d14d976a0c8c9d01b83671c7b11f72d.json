{"ast":null,"code":"class BluetoothService{constructor(){this.device=null;this.server=null;this.services=new Map();this.characteristics=new Map();this.isConnected=false;this.listeners=new Set();}// Request device and connect\nasync connect(){try{// Define the services we're interested in\nconst serviceUuids=['heart_rate',// Heart Rate Service\n'device_information',// Device Information Service\n0x180D,// Heart Rate Service UUID\n0x180F,// Battery Service UUID\n0x1810,// Blood Pressure Service UUID\n0x1813// Glucose Service UUID\n];// Request Bluetooth device\nthis.device=await navigator.bluetooth.requestDevice({filters:[{services:serviceUuids},{namePrefix:'Fitbit'},{namePrefix:'Garmin'},{namePrefix:'Apple'},{namePrefix:'Samsung'}],optionalServices:serviceUuids});this.device.addEventListener('gattserverdisconnected',this.onDisconnected.bind(this));// Connect to GATT server\nthis.server=await this.device.gatt.connect();// Get primary services\nawait this.discoverServices();this.isConnected=true;this.notifyListeners('connected',{device:this.device});return{success:true,device:this.device};}catch(error){console.error('Bluetooth connection failed:',error);return{success:false,error:error.message};}}// Disconnect from device\nasync disconnect(){if(this.device&&this.device.gatt.connected){this.device.gatt.disconnect();}this.isConnected=false;this.device=null;this.server=null;this.services.clear();this.characteristics.clear();this.notifyListeners('disconnected');}// Discover available services and characteristics\nasync discoverServices(){try{const services=await this.server.getPrimaryServices();for(const service of services){this.services.set(service.uuid,service);const characteristics=await service.getCharacteristics();for(const characteristic of characteristics){this.characteristics.set(characteristic.uuid,characteristic);// Start notifications for relevant characteristics\nif(this.shouldStartNotifications(characteristic)){await this.startNotifications(characteristic);}}}}catch(error){console.error('Service discovery failed:',error);}}// Check if we should start notifications for a characteristic\nshouldStartNotifications(characteristic){const notifyUuids=[0x2A37,// Heart Rate Measurement\n0x2A39,// Heart Rate Control Point\n0x2A9C,// Body Sensor Location\n0x2A53,// RCS Feature\n0x2A54// RCS Status\n];return notifyUuids.includes(characteristic.uuid);}// Start notifications for a characteristic\nasync startNotifications(characteristic){try{await characteristic.startNotifications();characteristic.addEventListener('characteristicvaluechanged',this.onCharacteristicValueChanged.bind(this));console.log(\"Started notifications for \".concat(characteristic.uuid));}catch(error){console.error(\"Failed to start notifications for \".concat(characteristic.uuid,\":\"),error);}}// Handle characteristic value changes\nonCharacteristicValueChanged(event){const characteristic=event.target;const value=event.target.value;const data=this.parseCharacteristicData(characteristic.uuid,value);if(data){this.notifyListeners('data',data);}}// Parse characteristic data based on UUID\nparseCharacteristicData(uuid,value){const buffer=value.buffer;const dataView=new DataView(buffer);switch(uuid){case 0x2A37:// Heart Rate Measurement\nreturn this.parseHeartRateMeasurement(dataView);case 0x2A39:// Heart Rate Control Point\nreturn{type:'heart_rate_control',value:dataView.getUint8(0)};case 0x2A9C:// Body Sensor Location\nreturn{type:'body_sensor_location',location:dataView.getUint8(0)};default:return{type:'unknown',uuid,value:Array.from(new Uint8Array(buffer))};}}// Parse heart rate measurement data\nparseHeartRateMeasurement(dataView){let index=0;const flags=dataView.getUint8(index++);const rate16Bits=flags&0x1;const contactDetected=flags&0x2;const contactSupported=flags&0x4;const energyExpended=flags&0x8;const rrInterval=flags&0x10;let heartRate;if(rate16Bits){heartRate=dataView.getUint16(index,true);index+=2;}else{heartRate=dataView.getUint8(index++);}let energy;if(energyExpended){energy=dataView.getUint16(index,true);index+=2;}let rrIntervals=[];if(rrInterval){while(index<dataView.byteLength){rrIntervals.push(dataView.getUint16(index,true));index+=2;}}return{type:'heart_rate',heartRate,contactDetected,contactSupported,energyExpended,rrIntervals,timestamp:new Date()};}// Handle disconnection\nonDisconnected(){this.isConnected=false;this.device=null;this.server=null;this.services.clear();this.characteristics.clear();this.notifyListeners('disconnected');}// Add event listener\naddEventListener(callback){this.listeners.add(callback);}// Remove event listener\nremoveEventListener(callback){this.listeners.delete(callback);}// Notify all listeners\nnotifyListeners(event,data){this.listeners.forEach(callback=>{try{callback(event,data);}catch(error){console.error('Error in Bluetooth event listener:',error);}});}// Get device information\nasync getDeviceInfo(){try{const deviceInfoService=this.services.get(0x180A);// Device Information Service\nif(!deviceInfoService)return null;const characteristics=await deviceInfoService.getCharacteristics();const info={};for(const char of characteristics){const value=await char.readValue();const decoder=new TextDecoder('utf-8');info[char.uuid]=decoder.decode(value);}return info;}catch(error){console.error('Failed to get device info:',error);return null;}}// Get battery level\nasync getBatteryLevel(){try{const batteryService=this.services.get(0x180F);// Battery Service\nif(!batteryService)return null;const batteryLevelChar=await batteryService.getCharacteristic(0x2A19);// Battery Level\nconst value=await batteryLevelChar.readValue();return value.getUint8(0);}catch(error){console.error('Failed to get battery level:',error);return null;}}}// Create singleton instance\nconst bluetoothService=new BluetoothService();export default bluetoothService;","map":{"version":3,"names":["BluetoothService","constructor","device","server","services","Map","characteristics","isConnected","listeners","Set","connect","serviceUuids","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","addEventListener","onDisconnected","bind","gatt","discoverServices","notifyListeners","success","error","console","message","disconnect","connected","clear","getPrimaryServices","service","set","uuid","getCharacteristics","characteristic","shouldStartNotifications","startNotifications","notifyUuids","includes","onCharacteristicValueChanged","log","concat","event","target","value","data","parseCharacteristicData","buffer","dataView","DataView","parseHeartRateMeasurement","type","getUint8","location","Array","from","Uint8Array","index","flags","rate16Bits","contactDetected","contactSupported","energyExpended","rrInterval","heartRate","getUint16","energy","rrIntervals","byteLength","push","timestamp","Date","callback","add","removeEventListener","delete","forEach","getDeviceInfo","deviceInfoService","get","info","char","readValue","decoder","TextDecoder","decode","getBatteryLevel","batteryService","batteryLevelChar","getCharacteristic","bluetoothService"],"sources":["C:/Users/Angel/Desktop/Smart/frontend/src/services/bluetooth.js"],"sourcesContent":["class BluetoothService {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.services = new Map();\n    this.characteristics = new Map();\n    this.isConnected = false;\n    this.listeners = new Set();\n  }\n\n  // Request device and connect\n  async connect() {\n    try {\n      // Define the services we're interested in\n      const serviceUuids = [\n        'heart_rate',           // Heart Rate Service\n        'device_information',   // Device Information Service\n        0x180D,                 // Heart Rate Service UUID\n        0x180F,                 // Battery Service UUID\n        0x1810,                 // Blood Pressure Service UUID\n        0x1813,                 // Glucose Service UUID\n      ];\n\n      // Request Bluetooth device\n      this.device = await navigator.bluetooth.requestDevice({\n        filters: [\n          { services: serviceUuids },\n          { namePrefix: 'Fitbit' },\n          { namePrefix: 'Garmin' },\n          { namePrefix: 'Apple' },\n          { namePrefix: 'Samsung' }\n        ],\n        optionalServices: serviceUuids\n      });\n\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected.bind(this));\n\n      // Connect to GATT server\n      this.server = await this.device.gatt.connect();\n\n      // Get primary services\n      await this.discoverServices();\n\n      this.isConnected = true;\n      this.notifyListeners('connected', { device: this.device });\n\n      return { success: true, device: this.device };\n\n    } catch (error) {\n      console.error('Bluetooth connection failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Disconnect from device\n  async disconnect() {\n    if (this.device && this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    }\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.services.clear();\n    this.characteristics.clear();\n    this.notifyListeners('disconnected');\n  }\n\n  // Discover available services and characteristics\n  async discoverServices() {\n    try {\n      const services = await this.server.getPrimaryServices();\n\n      for (const service of services) {\n        this.services.set(service.uuid, service);\n\n        const characteristics = await service.getCharacteristics();\n        for (const characteristic of characteristics) {\n          this.characteristics.set(characteristic.uuid, characteristic);\n\n          // Start notifications for relevant characteristics\n          if (this.shouldStartNotifications(characteristic)) {\n            await this.startNotifications(characteristic);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Service discovery failed:', error);\n    }\n  }\n\n  // Check if we should start notifications for a characteristic\n  shouldStartNotifications(characteristic) {\n    const notifyUuids = [\n      0x2A37, // Heart Rate Measurement\n      0x2A39, // Heart Rate Control Point\n      0x2A9C, // Body Sensor Location\n      0x2A53, // RCS Feature\n      0x2A54, // RCS Status\n    ];\n    return notifyUuids.includes(characteristic.uuid);\n  }\n\n  // Start notifications for a characteristic\n  async startNotifications(characteristic) {\n    try {\n      await characteristic.startNotifications();\n      characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChanged.bind(this));\n      console.log(`Started notifications for ${characteristic.uuid}`);\n    } catch (error) {\n      console.error(`Failed to start notifications for ${characteristic.uuid}:`, error);\n    }\n  }\n\n  // Handle characteristic value changes\n  onCharacteristicValueChanged(event) {\n    const characteristic = event.target;\n    const value = event.target.value;\n    const data = this.parseCharacteristicData(characteristic.uuid, value);\n\n    if (data) {\n      this.notifyListeners('data', data);\n    }\n  }\n\n  // Parse characteristic data based on UUID\n  parseCharacteristicData(uuid, value) {\n    const buffer = value.buffer;\n    const dataView = new DataView(buffer);\n\n    switch (uuid) {\n      case 0x2A37: // Heart Rate Measurement\n        return this.parseHeartRateMeasurement(dataView);\n\n      case 0x2A39: // Heart Rate Control Point\n        return { type: 'heart_rate_control', value: dataView.getUint8(0) };\n\n      case 0x2A9C: // Body Sensor Location\n        return { type: 'body_sensor_location', location: dataView.getUint8(0) };\n\n      default:\n        return { type: 'unknown', uuid, value: Array.from(new Uint8Array(buffer)) };\n    }\n  }\n\n  // Parse heart rate measurement data\n  parseHeartRateMeasurement(dataView) {\n    let index = 0;\n    const flags = dataView.getUint8(index++);\n    const rate16Bits = flags & 0x1;\n    const contactDetected = flags & 0x2;\n    const contactSupported = flags & 0x4;\n    const energyExpended = flags & 0x8;\n    const rrInterval = flags & 0x10;\n\n    let heartRate;\n    if (rate16Bits) {\n      heartRate = dataView.getUint16(index, true);\n      index += 2;\n    } else {\n      heartRate = dataView.getUint8(index++);\n    }\n\n    let energy;\n    if (energyExpended) {\n      energy = dataView.getUint16(index, true);\n      index += 2;\n    }\n\n    let rrIntervals = [];\n    if (rrInterval) {\n      while (index < dataView.byteLength) {\n        rrIntervals.push(dataView.getUint16(index, true));\n        index += 2;\n      }\n    }\n\n    return {\n      type: 'heart_rate',\n      heartRate,\n      contactDetected,\n      contactSupported,\n      energyExpended,\n      rrIntervals,\n      timestamp: new Date()\n    };\n  }\n\n  // Handle disconnection\n  onDisconnected() {\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.services.clear();\n    this.characteristics.clear();\n    this.notifyListeners('disconnected');\n  }\n\n  // Add event listener\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  // Remove event listener\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Notify all listeners\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in Bluetooth event listener:', error);\n      }\n    });\n  }\n\n  // Get device information\n  async getDeviceInfo() {\n    try {\n      const deviceInfoService = this.services.get(0x180A); // Device Information Service\n      if (!deviceInfoService) return null;\n\n      const characteristics = await deviceInfoService.getCharacteristics();\n\n      const info = {};\n      for (const char of characteristics) {\n        const value = await char.readValue();\n        const decoder = new TextDecoder('utf-8');\n        info[char.uuid] = decoder.decode(value);\n      }\n\n      return info;\n    } catch (error) {\n      console.error('Failed to get device info:', error);\n      return null;\n    }\n  }\n\n  // Get battery level\n  async getBatteryLevel() {\n    try {\n      const batteryService = this.services.get(0x180F); // Battery Service\n      if (!batteryService) return null;\n\n      const batteryLevelChar = await batteryService.getCharacteristic(0x2A19); // Battery Level\n      const value = await batteryLevelChar.readValue();\n\n      return value.getUint8(0);\n    } catch (error) {\n      console.error('Failed to get battery level:', error);\n      return null;\n    }\n  }\n}\n\n// Create singleton instance\nconst bluetoothService = new BluetoothService();\n\nexport default bluetoothService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}