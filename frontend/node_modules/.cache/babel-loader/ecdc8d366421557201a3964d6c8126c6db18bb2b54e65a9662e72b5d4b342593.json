{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  }),\n  register: (name, email, password) => api.post('/auth/register', {\n    name,\n    email,\n    password\n  }),\n  getMe: () => api.get('/auth/me'),\n  logout: () => api.post('/auth/logout')\n};\n\n// Health data API\nexport const healthAPI = {\n  getCurrentData: () => api.get('/health/data'),\n  saveHealthData: data => api.post('/health/data', data),\n  getHistory: params => api.get('/health/history', {\n    params\n  }),\n  getAggregatedData: (startDate, endDate) => api.get('/health/aggregated', {\n    params: {\n      startDate,\n      endDate\n    }\n  }),\n  deleteData: id => api.delete(`/health/data/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","email","password","post","register","name","getMe","get","logout","healthAPI","getCurrentData","saveHealthData","data","getHistory","params","getAggregatedData","startDate","endDate","deleteData","id","delete"],"sources":["C:/Users/Angel/Desktop/Smart/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API\nexport const authAPI = {\n  login: (email, password) =>\n    api.post('/auth/login', { email, password }),\n\n  register: (name, email, password) =>\n    api.post('/auth/register', { name, email, password }),\n\n  getMe: () =>\n    api.get('/auth/me'),\n\n  logout: () =>\n    api.post('/auth/logout'),\n};\n\n// Health data API\nexport const healthAPI = {\n  getCurrentData: () =>\n    api.get('/health/data'),\n\n  saveHealthData: (data) =>\n    api.post('/health/data', data),\n\n  getHistory: (params) =>\n    api.get('/health/history', { params }),\n\n  getAggregatedData: (startDate, endDate) =>\n    api.get('/health/aggregated', { params: { startDate, endDate } }),\n\n  deleteData: (id) =>\n    api.delete(`/health/data/${id}`),\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KACrB5B,GAAG,CAAC6B,IAAI,CAAC,aAAa,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC,CAAC;EAE9CE,QAAQ,EAAEA,CAACC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,KAC9B5B,GAAG,CAAC6B,IAAI,CAAC,gBAAgB,EAAE;IAAEE,IAAI;IAAEJ,KAAK;IAAEC;EAAS,CAAC,CAAC;EAEvDI,KAAK,EAAEA,CAAA,KACLhC,GAAG,CAACiC,GAAG,CAAC,UAAU,CAAC;EAErBC,MAAM,EAAEA,CAAA,KACNlC,GAAG,CAAC6B,IAAI,CAAC,cAAc;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMM,SAAS,GAAG;EACvBC,cAAc,EAAEA,CAAA,KACdpC,GAAG,CAACiC,GAAG,CAAC,cAAc,CAAC;EAEzBI,cAAc,EAAGC,IAAI,IACnBtC,GAAG,CAAC6B,IAAI,CAAC,cAAc,EAAES,IAAI,CAAC;EAEhCC,UAAU,EAAGC,MAAM,IACjBxC,GAAG,CAACiC,GAAG,CAAC,iBAAiB,EAAE;IAAEO;EAAO,CAAC,CAAC;EAExCC,iBAAiB,EAAEA,CAACC,SAAS,EAAEC,OAAO,KACpC3C,GAAG,CAACiC,GAAG,CAAC,oBAAoB,EAAE;IAAEO,MAAM,EAAE;MAAEE,SAAS;MAAEC;IAAQ;EAAE,CAAC,CAAC;EAEnEC,UAAU,EAAGC,EAAE,IACb7C,GAAG,CAAC8C,MAAM,CAAC,gBAAgBD,EAAE,EAAE;AACnC,CAAC;AAED,eAAe7C,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}