{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport bluetoothService from '../services/bluetooth';\nexport const useBluetooth = () => {\n  _s();\n  const [device, setDevice] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [healthData, setHealthData] = useState({});\n  const [deviceInfo, setDeviceInfo] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle Bluetooth events\n  const handleBluetoothEvent = useCallback((event, data) => {\n    switch (event) {\n      case 'connected':\n        setDevice(data.device);\n        setIsConnected(true);\n        setError(null);\n        // Get device info after connection\n        bluetoothService.getDeviceInfo().then(info => {\n          setDeviceInfo(info);\n        });\n        break;\n      case 'disconnected':\n        setDevice(null);\n        setIsConnected(false);\n        setDeviceInfo(null);\n        setHealthData({});\n        break;\n      case 'data':\n        setHealthData(prev => ({\n          ...prev,\n          [data.type]: data,\n          timestamp: new Date()\n        }));\n        break;\n      default:\n        break;\n    }\n  }, []);\n  useEffect(() => {\n    bluetoothService.addEventListener(handleBluetoothEvent);\n    return () => {\n      bluetoothService.removeEventListener(handleBluetoothEvent);\n    };\n  }, [handleBluetoothEvent]);\n  const connect = async () => {\n    setError(null);\n    const result = await bluetoothService.connect();\n    if (!result.success) {\n      setError(result.error);\n    }\n    return result;\n  };\n  const disconnect = async () => {\n    await bluetoothService.disconnect();\n  };\n  return {\n    device,\n    isConnected,\n    healthData,\n    deviceInfo,\n    error,\n    connect,\n    disconnect,\n    batteryLevel: deviceInfo ? deviceInfo.batteryLevel : null\n  };\n};\n_s(useBluetooth, \"F9UMu/ZFiw7RkA3crD7VkFXWfFg=\");","map":{"version":3,"names":["useState","useEffect","useCallback","bluetoothService","useBluetooth","_s","device","setDevice","isConnected","setIsConnected","healthData","setHealthData","deviceInfo","setDeviceInfo","error","setError","handleBluetoothEvent","event","data","getDeviceInfo","then","info","prev","type","timestamp","Date","addEventListener","removeEventListener","connect","result","success","disconnect","batteryLevel"],"sources":["C:/Users/Angel/Desktop/Smart/frontend/src/hooks/useBluetooth.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport bluetoothService from '../services/bluetooth';\n\nexport const useBluetooth = () => {\n  const [device, setDevice] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [healthData, setHealthData] = useState({});\n  const [deviceInfo, setDeviceInfo] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle Bluetooth events\n  const handleBluetoothEvent = useCallback((event, data) => {\n    switch (event) {\n      case 'connected':\n        setDevice(data.device);\n        setIsConnected(true);\n        setError(null);\n        // Get device info after connection\n        bluetoothService.getDeviceInfo().then(info => {\n          setDeviceInfo(info);\n        });\n        break;\n\n      case 'disconnected':\n        setDevice(null);\n        setIsConnected(false);\n        setDeviceInfo(null);\n        setHealthData({});\n        break;\n\n      case 'data':\n        setHealthData(prev => ({\n          ...prev,\n          [data.type]: data,\n          timestamp: new Date()\n        }));\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    bluetoothService.addEventListener(handleBluetoothEvent);\n\n    return () => {\n      bluetoothService.removeEventListener(handleBluetoothEvent);\n    };\n  }, [handleBluetoothEvent]);\n\n  const connect = async () => {\n    setError(null);\n    const result = await bluetoothService.connect();\n\n    if (!result.success) {\n      setError(result.error);\n    }\n\n    return result;\n  };\n\n  const disconnect = async () => {\n    await bluetoothService.disconnect();\n  };\n\n  return {\n    device,\n    isConnected,\n    healthData,\n    deviceInfo,\n    error,\n    connect,\n    disconnect,\n    batteryLevel: deviceInfo ? deviceInfo.batteryLevel : null\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,gBAAgB,MAAM,uBAAuB;AAEpD,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMgB,oBAAoB,GAAGd,WAAW,CAAC,CAACe,KAAK,EAAEC,IAAI,KAAK;IACxD,QAAQD,KAAK;MACX,KAAK,WAAW;QACdV,SAAS,CAACW,IAAI,CAACZ,MAAM,CAAC;QACtBG,cAAc,CAAC,IAAI,CAAC;QACpBM,QAAQ,CAAC,IAAI,CAAC;QACd;QACAZ,gBAAgB,CAACgB,aAAa,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAI;UAC5CR,aAAa,CAACQ,IAAI,CAAC;QACrB,CAAC,CAAC;QACF;MAEF,KAAK,cAAc;QACjBd,SAAS,CAAC,IAAI,CAAC;QACfE,cAAc,CAAC,KAAK,CAAC;QACrBI,aAAa,CAAC,IAAI,CAAC;QACnBF,aAAa,CAAC,CAAC,CAAC,CAAC;QACjB;MAEF,KAAK,MAAM;QACTA,aAAa,CAACW,IAAI,KAAK;UACrB,GAAGA,IAAI;UACP,CAACJ,IAAI,CAACK,IAAI,GAAGL,IAAI;UACjBM,SAAS,EAAE,IAAIC,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;QACH;MAEF;QACE;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAENxB,SAAS,CAAC,MAAM;IACdE,gBAAgB,CAACuB,gBAAgB,CAACV,oBAAoB,CAAC;IAEvD,OAAO,MAAM;MACXb,gBAAgB,CAACwB,mBAAmB,CAACX,oBAAoB,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,CAACA,oBAAoB,CAAC,CAAC;EAE1B,MAAMY,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1Bb,QAAQ,CAAC,IAAI,CAAC;IACd,MAAMc,MAAM,GAAG,MAAM1B,gBAAgB,CAACyB,OAAO,CAAC,CAAC;IAE/C,IAAI,CAACC,MAAM,CAACC,OAAO,EAAE;MACnBf,QAAQ,CAACc,MAAM,CAACf,KAAK,CAAC;IACxB;IAEA,OAAOe,MAAM;EACf,CAAC;EAED,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAM5B,gBAAgB,CAAC4B,UAAU,CAAC,CAAC;EACrC,CAAC;EAED,OAAO;IACLzB,MAAM;IACNE,WAAW;IACXE,UAAU;IACVE,UAAU;IACVE,KAAK;IACLc,OAAO;IACPG,UAAU;IACVC,YAAY,EAAEpB,UAAU,GAAGA,UAAU,CAACoB,YAAY,GAAG;EACvD,CAAC;AACH,CAAC;AAAC3B,EAAA,CAzEWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}