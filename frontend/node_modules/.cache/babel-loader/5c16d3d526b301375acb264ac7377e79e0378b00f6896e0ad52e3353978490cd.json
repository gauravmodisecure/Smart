{"ast":null,"code":"import _objectSpread from\"C:/Users/Angel/Desktop/Smart/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import bluetoothService from'../services/bluetooth';export const useBluetooth=()=>{const[device,setDevice]=useState(null);const[isConnected,setIsConnected]=useState(false);const[healthData,setHealthData]=useState({});const[deviceInfo,setDeviceInfo]=useState(null);const[error,setError]=useState(null);// Handle Bluetooth events\nconst handleBluetoothEvent=useCallback((event,data)=>{switch(event){case'connected':setDevice(data.device);setIsConnected(true);setError(null);// Get device info after connection\nbluetoothService.getDeviceInfo().then(info=>{setDeviceInfo(info);});break;case'disconnected':setDevice(null);setIsConnected(false);setDeviceInfo(null);setHealthData({});break;case'data':setHealthData(prev=>_objectSpread(_objectSpread({},prev),{},{[data.type]:data,timestamp:new Date()}));break;default:break;}},[]);useEffect(()=>{bluetoothService.addEventListener(handleBluetoothEvent);return()=>{bluetoothService.removeEventListener(handleBluetoothEvent);};},[handleBluetoothEvent]);const connect=async()=>{setError(null);const result=await bluetoothService.connect();if(!result.success){setError(result.error);}return result;};const disconnect=async()=>{await bluetoothService.disconnect();};return{device,isConnected,healthData,deviceInfo,error,connect,disconnect,batteryLevel:deviceInfo?deviceInfo.batteryLevel:null};};","map":{"version":3,"names":["useState","useEffect","useCallback","bluetoothService","useBluetooth","device","setDevice","isConnected","setIsConnected","healthData","setHealthData","deviceInfo","setDeviceInfo","error","setError","handleBluetoothEvent","event","data","getDeviceInfo","then","info","prev","_objectSpread","type","timestamp","Date","addEventListener","removeEventListener","connect","result","success","disconnect","batteryLevel"],"sources":["C:/Users/Angel/Desktop/Smart/frontend/src/hooks/useBluetooth.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport bluetoothService from '../services/bluetooth';\n\nexport const useBluetooth = () => {\n  const [device, setDevice] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [healthData, setHealthData] = useState({});\n  const [deviceInfo, setDeviceInfo] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle Bluetooth events\n  const handleBluetoothEvent = useCallback((event, data) => {\n    switch (event) {\n      case 'connected':\n        setDevice(data.device);\n        setIsConnected(true);\n        setError(null);\n        // Get device info after connection\n        bluetoothService.getDeviceInfo().then(info => {\n          setDeviceInfo(info);\n        });\n        break;\n\n      case 'disconnected':\n        setDevice(null);\n        setIsConnected(false);\n        setDeviceInfo(null);\n        setHealthData({});\n        break;\n\n      case 'data':\n        setHealthData(prev => ({\n          ...prev,\n          [data.type]: data,\n          timestamp: new Date()\n        }));\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    bluetoothService.addEventListener(handleBluetoothEvent);\n\n    return () => {\n      bluetoothService.removeEventListener(handleBluetoothEvent);\n    };\n  }, [handleBluetoothEvent]);\n\n  const connect = async () => {\n    setError(null);\n    const result = await bluetoothService.connect();\n\n    if (!result.success) {\n      setError(result.error);\n    }\n\n    return result;\n  };\n\n  const disconnect = async () => {\n    await bluetoothService.disconnect();\n  };\n\n  return {\n    device,\n    isConnected,\n    healthData,\n    deviceInfo,\n    error,\n    connect,\n    disconnect,\n    batteryLevel: deviceInfo ? deviceInfo.batteryLevel : null\n  };\n};\n"],"mappings":"0HAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CACxD,MAAO,CAAAC,gBAAgB,KAAM,uBAAuB,CAEpD,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGN,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACO,WAAW,CAAEC,cAAc,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACS,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAChD,KAAM,CAACW,UAAU,CAAEC,aAAa,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAACa,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAExC;AACA,KAAM,CAAAe,oBAAoB,CAAGb,WAAW,CAAC,CAACc,KAAK,CAAEC,IAAI,GAAK,CACxD,OAAQD,KAAK,EACX,IAAK,WAAW,CACdV,SAAS,CAACW,IAAI,CAACZ,MAAM,CAAC,CACtBG,cAAc,CAAC,IAAI,CAAC,CACpBM,QAAQ,CAAC,IAAI,CAAC,CACd;AACAX,gBAAgB,CAACe,aAAa,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,EAAI,CAC5CR,aAAa,CAACQ,IAAI,CAAC,CACrB,CAAC,CAAC,CACF,MAEF,IAAK,cAAc,CACjBd,SAAS,CAAC,IAAI,CAAC,CACfE,cAAc,CAAC,KAAK,CAAC,CACrBI,aAAa,CAAC,IAAI,CAAC,CACnBF,aAAa,CAAC,CAAC,CAAC,CAAC,CACjB,MAEF,IAAK,MAAM,CACTA,aAAa,CAACW,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACbD,IAAI,MACP,CAACJ,IAAI,CAACM,IAAI,EAAGN,IAAI,CACjBO,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,EACrB,CAAC,CACH,MAEF,QACE,MACJ,CACF,CAAC,CAAE,EAAE,CAAC,CAENxB,SAAS,CAAC,IAAM,CACdE,gBAAgB,CAACuB,gBAAgB,CAACX,oBAAoB,CAAC,CAEvD,MAAO,IAAM,CACXZ,gBAAgB,CAACwB,mBAAmB,CAACZ,oBAAoB,CAAC,CAC5D,CAAC,CACH,CAAC,CAAE,CAACA,oBAAoB,CAAC,CAAC,CAE1B,KAAM,CAAAa,OAAO,CAAG,KAAAA,CAAA,GAAY,CAC1Bd,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAe,MAAM,CAAG,KAAM,CAAA1B,gBAAgB,CAACyB,OAAO,CAAC,CAAC,CAE/C,GAAI,CAACC,MAAM,CAACC,OAAO,CAAE,CACnBhB,QAAQ,CAACe,MAAM,CAAChB,KAAK,CAAC,CACxB,CAEA,MAAO,CAAAgB,MAAM,CACf,CAAC,CAED,KAAM,CAAAE,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,KAAM,CAAA5B,gBAAgB,CAAC4B,UAAU,CAAC,CAAC,CACrC,CAAC,CAED,MAAO,CACL1B,MAAM,CACNE,WAAW,CACXE,UAAU,CACVE,UAAU,CACVE,KAAK,CACLe,OAAO,CACPG,UAAU,CACVC,YAAY,CAAErB,UAAU,CAAGA,UAAU,CAACqB,YAAY,CAAG,IACvD,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}