{"ast":null,"code":"class BluetoothService {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.services = new Map();\n    this.characteristics = new Map();\n    this.isConnected = false;\n    this.listeners = new Set();\n  }\n\n  // Request device and connect\n  async connect() {\n    try {\n      // Define the services we're interested in\n      const serviceUuids = ['heart_rate',\n      // Heart Rate Service\n      'device_information',\n      // Device Information Service\n      0x180D,\n      // Heart Rate Service UUID\n      0x180F,\n      // Battery Service UUID\n      0x1810,\n      // Blood Pressure Service UUID\n      0x1813 // Glucose Service UUID\n      ];\n\n      // Request Bluetooth device\n      this.device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: serviceUuids\n        }, {\n          namePrefix: 'Fitbit'\n        }, {\n          namePrefix: 'Garmin'\n        }, {\n          namePrefix: 'Apple'\n        }, {\n          namePrefix: 'Samsung'\n        }],\n        optionalServices: serviceUuids\n      });\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected.bind(this));\n\n      // Connect to GATT server\n      this.server = await this.device.gatt.connect();\n\n      // Get primary services\n      await this.discoverServices();\n      this.isConnected = true;\n      this.notifyListeners('connected', {\n        device: this.device\n      });\n      return {\n        success: true,\n        device: this.device\n      };\n    } catch (error) {\n      console.error('Bluetooth connection failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Disconnect from device\n  async disconnect() {\n    if (this.device && this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    }\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.services.clear();\n    this.characteristics.clear();\n    this.notifyListeners('disconnected');\n  }\n\n  // Discover available services and characteristics\n  async discoverServices() {\n    try {\n      const services = await this.server.getPrimaryServices();\n      for (const service of services) {\n        this.services.set(service.uuid, service);\n        const characteristics = await service.getCharacteristics();\n        for (const characteristic of characteristics) {\n          this.characteristics.set(characteristic.uuid, characteristic);\n\n          // Start notifications for relevant characteristics\n          if (this.shouldStartNotifications(characteristic)) {\n            await this.startNotifications(characteristic);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Service discovery failed:', error);\n    }\n  }\n\n  // Check if we should start notifications for a characteristic\n  shouldStartNotifications(characteristic) {\n    const notifyUuids = [0x2A37,\n    // Heart Rate Measurement\n    0x2A39,\n    // Heart Rate Control Point\n    0x2A9C,\n    // Body Sensor Location\n    0x2A53,\n    // RCS Feature\n    0x2A54 // RCS Status\n    ];\n    return notifyUuids.includes(characteristic.uuid);\n  }\n\n  // Start notifications for a characteristic\n  async startNotifications(characteristic) {\n    try {\n      await characteristic.startNotifications();\n      characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChanged.bind(this));\n      console.log(`Started notifications for ${characteristic.uuid}`);\n    } catch (error) {\n      console.error(`Failed to start notifications for ${characteristic.uuid}:`, error);\n    }\n  }\n\n  // Handle characteristic value changes\n  onCharacteristicValueChanged(event) {\n    const characteristic = event.target;\n    const value = event.target.value;\n    const data = this.parseCharacteristicData(characteristic.uuid, value);\n    if (data) {\n      this.notifyListeners('data', data);\n    }\n  }\n\n  // Parse characteristic data based on UUID\n  parseCharacteristicData(uuid, value) {\n    const buffer = value.buffer;\n    const dataView = new DataView(buffer);\n    switch (uuid) {\n      case 0x2A37:\n        // Heart Rate Measurement\n        return this.parseHeartRateMeasurement(dataView);\n      case 0x2A39:\n        // Heart Rate Control Point\n        return {\n          type: 'heart_rate_control',\n          value: dataView.getUint8(0)\n        };\n      case 0x2A9C:\n        // Body Sensor Location\n        return {\n          type: 'body_sensor_location',\n          location: dataView.getUint8(0)\n        };\n      default:\n        return {\n          type: 'unknown',\n          uuid,\n          value: Array.from(new Uint8Array(buffer))\n        };\n    }\n  }\n\n  // Parse heart rate measurement data\n  parseHeartRateMeasurement(dataView) {\n    let index = 0;\n    const flags = dataView.getUint8(index++);\n    const rate16Bits = flags & 0x1;\n    const contactDetected = flags & 0x2;\n    const contactSupported = flags & 0x4;\n    const energyExpended = flags & 0x8;\n    const rrInterval = flags & 0x10;\n    let heartRate;\n    if (rate16Bits) {\n      heartRate = dataView.getUint16(index, true);\n      index += 2;\n    } else {\n      heartRate = dataView.getUint8(index++);\n    }\n    let energy;\n    if (energyExpended) {\n      energy = dataView.getUint16(index, true);\n      index += 2;\n    }\n    let rrIntervals = [];\n    if (rrInterval) {\n      while (index < dataView.byteLength) {\n        rrIntervals.push(dataView.getUint16(index, true));\n        index += 2;\n      }\n    }\n    return {\n      type: 'heart_rate',\n      heartRate,\n      contactDetected,\n      contactSupported,\n      energyExpended,\n      rrIntervals,\n      timestamp: new Date()\n    };\n  }\n\n  // Handle disconnection\n  onDisconnected() {\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.services.clear();\n    this.characteristics.clear();\n    this.notifyListeners('disconnected');\n  }\n\n  // Add event listener\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  // Remove event listener\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Notify all listeners\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in Bluetooth event listener:', error);\n      }\n    });\n  }\n\n  // Get device information\n  async getDeviceInfo() {\n    try {\n      const deviceInfoService = this.services.get(0x180A); // Device Information Service\n      if (!deviceInfoService) return null;\n      const characteristics = await deviceInfoService.getCharacteristics();\n      const info = {};\n      for (const char of characteristics) {\n        const value = await char.readValue();\n        const decoder = new TextDecoder('utf-8');\n        info[char.uuid] = decoder.decode(value);\n      }\n      return info;\n    } catch (error) {\n      console.error('Failed to get device info:', error);\n      return null;\n    }\n  }\n\n  // Get battery level\n  async getBatteryLevel() {\n    try {\n      const batteryService = this.services.get(0x180F); // Battery Service\n      if (!batteryService) return null;\n      const batteryLevelChar = await batteryService.getCharacteristic(0x2A19); // Battery Level\n      const value = await batteryLevelChar.readValue();\n      return value.getUint8(0);\n    } catch (error) {\n      console.error('Failed to get battery level:', error);\n      return null;\n    }\n  }\n}\n\n// Create singleton instance\nconst bluetoothService = new BluetoothService();\nexport default bluetoothService;","map":{"version":3,"names":["BluetoothService","constructor","device","server","services","Map","characteristics","isConnected","listeners","Set","connect","serviceUuids","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","addEventListener","onDisconnected","bind","gatt","discoverServices","notifyListeners","success","error","console","message","disconnect","connected","clear","getPrimaryServices","service","set","uuid","getCharacteristics","characteristic","shouldStartNotifications","startNotifications","notifyUuids","includes","onCharacteristicValueChanged","log","event","target","value","data","parseCharacteristicData","buffer","dataView","DataView","parseHeartRateMeasurement","type","getUint8","location","Array","from","Uint8Array","index","flags","rate16Bits","contactDetected","contactSupported","energyExpended","rrInterval","heartRate","getUint16","energy","rrIntervals","byteLength","push","timestamp","Date","callback","add","removeEventListener","delete","forEach","getDeviceInfo","deviceInfoService","get","info","char","readValue","decoder","TextDecoder","decode","getBatteryLevel","batteryService","batteryLevelChar","getCharacteristic","bluetoothService"],"sources":["C:/Users/Angel/Desktop/Smart/frontend/src/services/bluetooth.js"],"sourcesContent":["class BluetoothService {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.services = new Map();\n    this.characteristics = new Map();\n    this.isConnected = false;\n    this.listeners = new Set();\n  }\n\n  // Request device and connect\n  async connect() {\n    try {\n      // Define the services we're interested in\n      const serviceUuids = [\n        'heart_rate',           // Heart Rate Service\n        'device_information',   // Device Information Service\n        0x180D,                 // Heart Rate Service UUID\n        0x180F,                 // Battery Service UUID\n        0x1810,                 // Blood Pressure Service UUID\n        0x1813,                 // Glucose Service UUID\n      ];\n\n      // Request Bluetooth device\n      this.device = await navigator.bluetooth.requestDevice({\n        filters: [\n          { services: serviceUuids },\n          { namePrefix: 'Fitbit' },\n          { namePrefix: 'Garmin' },\n          { namePrefix: 'Apple' },\n          { namePrefix: 'Samsung' }\n        ],\n        optionalServices: serviceUuids\n      });\n\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected.bind(this));\n\n      // Connect to GATT server\n      this.server = await this.device.gatt.connect();\n\n      // Get primary services\n      await this.discoverServices();\n\n      this.isConnected = true;\n      this.notifyListeners('connected', { device: this.device });\n\n      return { success: true, device: this.device };\n\n    } catch (error) {\n      console.error('Bluetooth connection failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Disconnect from device\n  async disconnect() {\n    if (this.device && this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    }\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.services.clear();\n    this.characteristics.clear();\n    this.notifyListeners('disconnected');\n  }\n\n  // Discover available services and characteristics\n  async discoverServices() {\n    try {\n      const services = await this.server.getPrimaryServices();\n\n      for (const service of services) {\n        this.services.set(service.uuid, service);\n\n        const characteristics = await service.getCharacteristics();\n        for (const characteristic of characteristics) {\n          this.characteristics.set(characteristic.uuid, characteristic);\n\n          // Start notifications for relevant characteristics\n          if (this.shouldStartNotifications(characteristic)) {\n            await this.startNotifications(characteristic);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Service discovery failed:', error);\n    }\n  }\n\n  // Check if we should start notifications for a characteristic\n  shouldStartNotifications(characteristic) {\n    const notifyUuids = [\n      0x2A37, // Heart Rate Measurement\n      0x2A39, // Heart Rate Control Point\n      0x2A9C, // Body Sensor Location\n      0x2A53, // RCS Feature\n      0x2A54, // RCS Status\n    ];\n    return notifyUuids.includes(characteristic.uuid);\n  }\n\n  // Start notifications for a characteristic\n  async startNotifications(characteristic) {\n    try {\n      await characteristic.startNotifications();\n      characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChanged.bind(this));\n      console.log(`Started notifications for ${characteristic.uuid}`);\n    } catch (error) {\n      console.error(`Failed to start notifications for ${characteristic.uuid}:`, error);\n    }\n  }\n\n  // Handle characteristic value changes\n  onCharacteristicValueChanged(event) {\n    const characteristic = event.target;\n    const value = event.target.value;\n    const data = this.parseCharacteristicData(characteristic.uuid, value);\n\n    if (data) {\n      this.notifyListeners('data', data);\n    }\n  }\n\n  // Parse characteristic data based on UUID\n  parseCharacteristicData(uuid, value) {\n    const buffer = value.buffer;\n    const dataView = new DataView(buffer);\n\n    switch (uuid) {\n      case 0x2A37: // Heart Rate Measurement\n        return this.parseHeartRateMeasurement(dataView);\n\n      case 0x2A39: // Heart Rate Control Point\n        return { type: 'heart_rate_control', value: dataView.getUint8(0) };\n\n      case 0x2A9C: // Body Sensor Location\n        return { type: 'body_sensor_location', location: dataView.getUint8(0) };\n\n      default:\n        return { type: 'unknown', uuid, value: Array.from(new Uint8Array(buffer)) };\n    }\n  }\n\n  // Parse heart rate measurement data\n  parseHeartRateMeasurement(dataView) {\n    let index = 0;\n    const flags = dataView.getUint8(index++);\n    const rate16Bits = flags & 0x1;\n    const contactDetected = flags & 0x2;\n    const contactSupported = flags & 0x4;\n    const energyExpended = flags & 0x8;\n    const rrInterval = flags & 0x10;\n\n    let heartRate;\n    if (rate16Bits) {\n      heartRate = dataView.getUint16(index, true);\n      index += 2;\n    } else {\n      heartRate = dataView.getUint8(index++);\n    }\n\n    let energy;\n    if (energyExpended) {\n      energy = dataView.getUint16(index, true);\n      index += 2;\n    }\n\n    let rrIntervals = [];\n    if (rrInterval) {\n      while (index < dataView.byteLength) {\n        rrIntervals.push(dataView.getUint16(index, true));\n        index += 2;\n      }\n    }\n\n    return {\n      type: 'heart_rate',\n      heartRate,\n      contactDetected,\n      contactSupported,\n      energyExpended,\n      rrIntervals,\n      timestamp: new Date()\n    };\n  }\n\n  // Handle disconnection\n  onDisconnected() {\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.services.clear();\n    this.characteristics.clear();\n    this.notifyListeners('disconnected');\n  }\n\n  // Add event listener\n  addEventListener(callback) {\n    this.listeners.add(callback);\n  }\n\n  // Remove event listener\n  removeEventListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  // Notify all listeners\n  notifyListeners(event, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in Bluetooth event listener:', error);\n      }\n    });\n  }\n\n  // Get device information\n  async getDeviceInfo() {\n    try {\n      const deviceInfoService = this.services.get(0x180A); // Device Information Service\n      if (!deviceInfoService) return null;\n\n      const characteristics = await deviceInfoService.getCharacteristics();\n\n      const info = {};\n      for (const char of characteristics) {\n        const value = await char.readValue();\n        const decoder = new TextDecoder('utf-8');\n        info[char.uuid] = decoder.decode(value);\n      }\n\n      return info;\n    } catch (error) {\n      console.error('Failed to get device info:', error);\n      return null;\n    }\n  }\n\n  // Get battery level\n  async getBatteryLevel() {\n    try {\n      const batteryService = this.services.get(0x180F); // Battery Service\n      if (!batteryService) return null;\n\n      const batteryLevelChar = await batteryService.getCharacteristic(0x2A19); // Battery Level\n      const value = await batteryLevelChar.readValue();\n\n      return value.getUint8(0);\n    } catch (error) {\n      console.error('Failed to get battery level:', error);\n      return null;\n    }\n  }\n}\n\n// Create singleton instance\nconst bluetoothService = new BluetoothService();\n\nexport default bluetoothService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}