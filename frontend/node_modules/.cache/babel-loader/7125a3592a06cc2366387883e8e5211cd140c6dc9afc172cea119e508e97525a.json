{"ast":null,"code":"import axios from'axios';// Create axios instance with base configuration\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5000/api',headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle token expiration\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});// Authentication API\nexport const authAPI={login:(email,password)=>api.post('/auth/login',{email,password}),register:(name,email,password)=>api.post('/auth/register',{name,email,password}),getMe:()=>api.get('/auth/me'),logout:()=>api.post('/auth/logout')};// Health data API\nexport const healthAPI={getCurrentData:()=>api.get('/health/data'),saveHealthData:data=>api.post('/health/data',data),getHistory:params=>api.get('/health/history',{params}),getAggregatedData:(startDate,endDate)=>api.get('/health/aggregated',{params:{startDate,endDate}}),deleteData:id=>api.delete(\"/health/data/\".concat(id))};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","email","password","post","register","name","getMe","get","logout","healthAPI","getCurrentData","saveHealthData","data","getHistory","params","getAggregatedData","startDate","endDate","deleteData","id","delete"],"sources":["C:/Users/Angel/Desktop/Smart/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API\nexport const authAPI = {\n  login: (email, password) =>\n    api.post('/auth/login', { email, password }),\n\n  register: (name, email, password) =>\n    api.post('/auth/register', { name, email, password }),\n\n  getMe: () =>\n    api.get('/auth/me'),\n\n  logout: () =>\n    api.post('/auth/logout'),\n};\n\n// Health data API\nexport const healthAPI = {\n  getCurrentData: () =>\n    api.get('/health/data'),\n\n  saveHealthData: (data) =>\n    api.post('/health/data', data),\n\n  getHistory: (params) =>\n    api.get('/health/history', { params }),\n\n  getAggregatedData: (startDate, endDate) =>\n    api.get('/health/aggregated', { params: { startDate, endDate } }),\n\n  deleteData: (id) =>\n    api.delete(`/health/data/${id}`),\n};\n\nexport default api;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CACrEC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,WAAAC,MAAA,CAAaJ,KAAK,CAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAM,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACAhB,GAAG,CAACO,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,EAAKA,QAAQ,CACrBH,KAAK,EAAK,KAAAI,eAAA,CACT,GAAI,EAAAA,eAAA,CAAAJ,KAAK,CAACG,QAAQ,UAAAC,eAAA,iBAAdA,eAAA,CAAgBC,MAAM,IAAK,GAAG,CAAE,CAClCT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC,CAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CACA,MAAO,CAAAR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAU,OAAO,CAAG,CACrBC,KAAK,CAAEA,CAACC,KAAK,CAAEC,QAAQ,GACrB7B,GAAG,CAAC8B,IAAI,CAAC,aAAa,CAAE,CAAEF,KAAK,CAAEC,QAAS,CAAC,CAAC,CAE9CE,QAAQ,CAAEA,CAACC,IAAI,CAAEJ,KAAK,CAAEC,QAAQ,GAC9B7B,GAAG,CAAC8B,IAAI,CAAC,gBAAgB,CAAE,CAAEE,IAAI,CAAEJ,KAAK,CAAEC,QAAS,CAAC,CAAC,CAEvDI,KAAK,CAAEA,CAAA,GACLjC,GAAG,CAACkC,GAAG,CAAC,UAAU,CAAC,CAErBC,MAAM,CAAEA,CAAA,GACNnC,GAAG,CAAC8B,IAAI,CAAC,cAAc,CAC3B,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,SAAS,CAAG,CACvBC,cAAc,CAAEA,CAAA,GACdrC,GAAG,CAACkC,GAAG,CAAC,cAAc,CAAC,CAEzBI,cAAc,CAAGC,IAAI,EACnBvC,GAAG,CAAC8B,IAAI,CAAC,cAAc,CAAES,IAAI,CAAC,CAEhCC,UAAU,CAAGC,MAAM,EACjBzC,GAAG,CAACkC,GAAG,CAAC,iBAAiB,CAAE,CAAEO,MAAO,CAAC,CAAC,CAExCC,iBAAiB,CAAEA,CAACC,SAAS,CAAEC,OAAO,GACpC5C,GAAG,CAACkC,GAAG,CAAC,oBAAoB,CAAE,CAAEO,MAAM,CAAE,CAAEE,SAAS,CAAEC,OAAQ,CAAE,CAAC,CAAC,CAEnEC,UAAU,CAAGC,EAAE,EACb9C,GAAG,CAAC+C,MAAM,iBAAAhC,MAAA,CAAiB+B,EAAE,CAAE,CACnC,CAAC,CAED,cAAe,CAAA9C,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}